.data
.align 0
inBinNum: .space 34 
#leitura de 32 bits + \n +\0 ->\n eh utilizado no fim da inserção

.text
.globl main
main:

	#ler valor a ser convertido
	li $v0, 8
	la $a0, inBinNum
	la $a1, 34
	syscall 

	#$t5 será o contador
	move $t2, $zero
	
	#carregar endereço string
	la $t1, inBinNum
	
	#carregar 10 para o registrador $s0
	li $t3, 10	
	
	
#Le o binario até encontrar o \n
# $t1 = endereco da string inNumBin
# t$2 = comeca com 0 e será o contador
# $t3 = 10
# $t4 = caracter atual da string

# while (inNumBin[i] != '\n'){
#	char = inNumBin[i]
#	i++
#}
loopToEnter:

	#pegar char da string
	lb $t4, 0($t1)
	
	#Condicao de parada se t4 for igual a \n
	beq $t4, $t3, endLoopToEnter
	
	#somar 1 no reg $t1 para andar nas casas
	addi $t1, $t1, 1
	
	#contador de casas
	addi $t2, $t2, 1
	
	j loopToEnter
	

endLoopToEnter:


	#carregar registrador $t6 com 2 para a pontenciação
	li $t6, 2
	
	#responsavel por fazer o papel da "potencia" 
	li $s0, 1
	
	#Valor decimal
	li $s1, 0
	
	li $t3, -1
	
	
#Loop de conversõ binário para decimal
#t6 = 2 2^(posicao)
#$s0 = 1 e vai sendo multiplicado por 2 ao
#$t3 = -1 codicao de parada
#$s1 = valor decimal
# for (int i = strlen(nuBin); i > 0; i--) {
#	aux = numBin[i];
#	aux *= mult;
#	mult *=2;
#	total +=aux;
#}
loopBinToDec:
	
	#Andar com o numero e o contador pra -1
	addi $t1, $t1, -1
	
	addi $t2, $t2, -1
	
	#verifiva se ja estamos na posicao final
	beq $t2, $t3 , endProg
	
	#acessar caracter atual
	lb $t4, 0($t1)
	
	#conversão de número ascii pra numeros inteiros
	addi $t4, $t4, -48
	
	#Char[posicao] * mult
	mul $t4, $s0, $t4
	
	#mult aumenta a potencia (2*2)
	#atualiza mult: mult *=2
	mul $s0, $t6, $s0
	
	#Total = Total + (Char[posicao] * mult)
	add $s1, $s1, $t4
	 
	j loopBinToDec

	
endProg:

	li $v0, 1
	move $a0, $s1
	syscall
	
	li $v0, 10 
	syscall